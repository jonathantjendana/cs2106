
/*************************************
 * Lab 3 Exercise 2
 * Name: Yang Chenglong
 * Student No: A0167107H
 * Lab Group: 07
 *************************************/
#include <pthread.h>
#include "rw_lock.h"

void initialise(rw_lock* lock)
{
  pthread_mutex_init(&(lock->mutex), NULL);
  pthread_mutex_init(&(lock->isWriterIn), NULL);
  pthread_mutex_init(&(lock->isWriterWaiting), NULL);
  lock->reader_count = 0;
  lock->writer_count = 0;
}

void writer_acquire(rw_lock* lock)
{
  // halt future reader joining queue
  pthread_mutex_lock(&(lock->isWriterWaiting));
  pthread_mutex_lock(&(lock->isWriterIn));
  //pthread_mutex_unlock(&(lock->isWriterWaiting));
  lock->writer_count++;
}

void writer_release(rw_lock* lock)
{
  lock->writer_count--;
  pthread_mutex_unlock(&(lock->isWriterIn));
  pthread_mutex_unlock(&(lock->isWriterWaiting));
}

void reader_acquire(rw_lock* lock)
{
  // fast passthrough for reader
  pthread_mutex_lock(&(lock->isWriterWaiting));
  pthread_mutex_unlock(&(lock->isWriterWaiting));
  pthread_mutex_lock(&(lock->mutex));
  if (!lock->reader_count) {
      pthread_mutex_lock(&(lock->isWriterIn));
  }
  lock->reader_count++;
  pthread_mutex_unlock(&(lock->mutex));
}

void reader_release(rw_lock* lock)
{
  pthread_mutex_lock(&(lock->mutex));
  lock->reader_count--;
  if (!lock->reader_count) {
      pthread_mutex_unlock(&(lock->isWriterIn));
  }
  pthread_mutex_unlock(&(lock->mutex));
}

void cleanup(rw_lock* lock)
{
  pthread_mutex_destroy(&(lock->mutex));
  pthread_mutex_destroy(&(lock->isWriterIn));
  pthread_mutex_destroy(&(lock->isWriterWaiting));
}
